#!/bin/bash
# Debian 9 and 10 VPS Installer
# Script by Bonveio Abitona
# 
# Illegal selling and redistribution of this script is strictly prohibited
# Please respect author's Property
# Binigay sainyo ng libre, ipamahagi nyo rin ng libre.
#
#

#############################
#############################

#L2TP SCRIPT DEBIAN AND UBUNTU
wget -q 'https://raw.githubusercontent.com/lodixyruss1/LODIxyrussL2TP/master/l2tp_debuntu.sh' && chmod +x l2tp_debuntu.sh && ./l2tp_debuntu.sh

#TO ADD USERS
wget -q 'https://raw.githubusercontent.com/lodixyruss1/LODIxyrussL2TP/master/add_vpn_user.sh' && chmod +x add_vpn_user.sh && ./add_vpn_user.sh

#TO UPDATE ALL USERS
wget -q 'https://raw.githubusercontent.com/lodixyruss1/LODIxyrussL2TP/master/update_vpn_users.sh' && chmod +x update_vpn_users.sh && ./update_vpn_users.sh

# Variables (Can be changed depends on your preferred values)
# Script name
MyScriptName='LODIxyrussScript'

# OpenSSH Ports
SSH_Port1='22'
SSH_Port2='225'

# Your SSH Banner
SSH_Banner='https://fakenetvpn.com/raw/amy_script_banner.json'

# Dropbear Ports
Dropbear_Port1='844'
Dropbear_Port2='843'

# Stunnel Ports
Stunnel_Port1='445' # through Dropbear
Stunnel_Port2='444' # through OpenSSH
Stunnel_Port3='448' # through OpenVPN

# OpenVPN Ports
OpenVPN_Port1='443'
OpenVPN_Port2='1194' # take note when you change this port, openvpn sun noload config will not work

# Privoxy Ports (must be 1024 or higher)
Privoxy_Port1='8118'
Privoxy_Port2='9090'
# OpenVPN Config Download Port
OvpnDownload_Port='81' # Before changing this value, please read this document. It contains all unsafe ports for Google Chrome Browser, please read from line #23 to line #89: https://chromium.googlesource.com/chromium/src.git/+/refs/heads/master/net/base/port_util.cc

# Server local time
MyVPS_Time='Asia/Kuala_Lumpur'
#############################


#############################
#############################
## All function used for this script
#############################
## WARNING: Do not modify or edit anything
## if you did'nt know what to do.
## This part is too sensitive.
#############################
#############################

function InstUpdates(){
 export DEBIAN_FRONTEND=noninteractive
 apt-get update
 apt-get upgrade -y
 
 # Removing some firewall tools that may affect other services
 #apt-get remove --purge ufw firewalld -y

 
 # Installing some important machine essentials
 apt-get install nano wget curl zip unzip tar gzip p7zip-full bc rc openssl cron net-tools dnsutils dos2unix screen bzip2 ccrypt -y
 
 # Now installing all our wanted services
 apt-get install dropbear stunnel4 privoxy ca-certificates nginx ruby apt-transport-https lsb-release squid screenfetch -y

 # Installing all required packages to install Webmin
 apt-get install perl libnet-ssleay-perl openssl libauthen-pam-perl libpam-runtime libio-pty-perl apt-show-versions python dbus libxml-parser-perl -y
 apt-get install shared-mime-info jq -y
 
 # Installing a text colorizer
 gem install lolcat

 # Trying to remove obsolette packages after installation
 apt-get autoremove -y
 
 # Installing OpenVPN by pulling its repository inside sources.list file 
 #rm -rf /etc/apt/sources.list.d/openvpn*
 echo "deb http://build.openvpn.net/debian/openvpn/stable $(lsb_release -sc) main" >/etc/apt/sources.list.d/openvpn.list && apt-key del E158C569 && wget -O - https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add -
 wget -qO security-openvpn-net.asc "https://keys.openpgp.org/vks/v1/by-fingerprint/F554A3687412CFFEBDEFE0A312F5F7B42F2B01E7" && gpg --import security-openvpn-net.asc
 apt-get update -y
 apt-get install openvpn -y
}

function InstWebmin(){
 # Download the webmin .deb package
 # You may change its webmin version depends on the link you've loaded in this variable(.deb file only, do not load .zip or .tar.gz file):
 WebminFile='http://prdownloads.sourceforge.net/webadmin/webmin_1.910_all.deb'
 wget -qO webmin.deb "$WebminFile"
 
 # Installing .deb package for webmin
 dpkg --install webmin.deb
 
 rm -rf webmin.deb
 
 # Configuring webmin server config to use only http instead of https
 sed -i 's|ssl=1|ssl=0|g' /etc/webmin/miniserv.conf
 
 # Then restart to take effect
 systemctl restart webmin
}

function InstSSH(){
 # Removing some duplicated sshd server configs
 rm -f /etc/ssh/sshd_config*
 
 # Creating a SSH server config using cat eof tricks
 cat <<'MySSHConfig' > /etc/ssh/sshd_config
# My OpenSSH Server config
Port myPORT1
Port myPORT2
AddressFamily inet
ListenAddress 0.0.0.0
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key
PermitRootLogin yes
MaxSessions 1024
PubkeyAuthentication yes
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding yes
PrintMotd no
ClientAliveInterval 240
ClientAliveCountMax 2
UseDNS no
Banner /etc/banner
AcceptEnv LANG LC_*
Subsystem   sftp  /usr/lib/openssh/sftp-server
MySSHConfig

 # Now we'll put our ssh ports inside of sshd_config
 sed -i "s|myPORT1|$SSH_Port1|g" /etc/ssh/sshd_config
 sed -i "s|myPORT2|$SSH_Port2|g" /etc/ssh/sshd_config

 # Download our SSH Banner
 rm -f /etc/banner
 wget -qO /etc/banner "$SSH_Banner"
 dos2unix -q /etc/banner

 # My workaround code to remove `BAD Password error` from passwd command, it will fix password-related error on their ssh accounts.
 sed -i '/password\s*requisite\s*pam_cracklib.s.*/d' /etc/pam.d/common-password
 sed -i 's/use_authtok //g' /etc/pam.d/common-password

 # Some command to identify null shells when you tunnel through SSH or using Stunnel, it will fix user/pass authentication error on HTTP Injector, KPN Tunnel, eProxy, SVI, HTTP Proxy Injector etc ssh/ssl tunneling apps.
 sed -i '/\/bin\/false/d' /etc/shells
 sed -i '/\/usr\/sbin\/nologin/d' /etc/shells
 echo '/bin/false' >> /etc/shells
 echo '/usr/sbin/nologin' >> /etc/shells
 
 # Restarting openssh service
 systemctl restart ssh
 
 # Removing some duplicate config file
 rm -rf /etc/default/dropbear*
 
 # creating dropbear config using cat eof tricks
 cat <<'MyDropbear' > /etc/default/dropbear
# My Dropbear Config
NO_START=0
DROPBEAR_PORT=PORT01
DROPBEAR_EXTRA_ARGS="-p PORT02"
DROPBEAR_BANNER="/etc/banner"
DROPBEAR_RSAKEY="/etc/dropbear/dropbear_rsa_host_key"
DROPBEAR_DSSKEY="/etc/dropbear/dropbear_dss_host_key"
DROPBEAR_ECDSAKEY="/etc/dropbear/dropbear_ecdsa_host_key"
DROPBEAR_RECEIVE_WINDOW=65536
MyDropbear

 # Now changing our desired dropbear ports
 sed -i "s|PORT01|$Dropbear_Port1|g" /etc/default/dropbear
 sed -i "s|PORT02|$Dropbear_Port2|g" /etc/default/dropbear
 
 # Restarting dropbear service
 systemctl restart dropbear
}

function InsStunnel(){
 StunnelDir=$(ls /etc/default | grep stunnel | head -n1)

 # Creating stunnel startup config using cat eof tricks
cat <<'MyStunnelD' > /etc/default/$StunnelDir
# My Stunnel Config
ENABLED=1
FILES="/etc/stunnel/*.conf"
OPTIONS=""
BANNER="/etc/banner"
PPP_RESTART=0
# RLIMITS="-n 4096 -d unlimited"
RLIMITS=""
MyStunnelD

 # Removing all stunnel folder contents
 rm -rf /etc/stunnel/*
 
 # Creating stunnel certifcate using openssl
 openssl req -new -x509 -days 9999 -nodes -subj "/C=PH/ST=NCR/L=Manila/O=$MyScriptName/OU=$MyScriptName/CN=$MyScriptName" -out /etc/stunnel/stunnel.pem -keyout /etc/stunnel/stunnel.pem &> /dev/null
##  > /dev/null 2>&1

 # Creating stunnel server config
 cat <<'MyStunnelC' > /etc/stunnel/stunnel.conf
# My Stunnel Config
pid = /var/run/stunnel.pid
cert = /etc/stunnel/stunnel.pem
client = no
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
TIMEOUTclose = 0

[dropbear]
accept = Stunnel_Port1
connect = 127.0.0.1:dropbear_port_c

[openssh]
accept = Stunnel_Port2
connect = 127.0.0.1:openssh_port_c

[openvpn]
accept = 448
connect = 127.0.0.1:443
MyStunnelC

 # setting stunnel ports
 sed -i "s|Stunnel_Port1|$Stunnel_Port1|g" /etc/stunnel/stunnel.conf
 sed -i "s|dropbear_port_c|$(netstat -tlnp | grep -i dropbear | awk '{print $4}' | cut -d: -f2 | xargs | awk '{print $2}' | head -n1)|g" /etc/stunnel/stunnel.conf
 sed -i "s|Stunnel_Port2|$Stunnel_Port2|g" /etc/stunnel/stunnel.conf
 sed -i "s|openssh_port_c|$(netstat -tlnp | grep -i ssh | awk '{print $4}' | cut -d: -f2 | xargs | awk '{print $2}' | head -n1)|g" /etc/stunnel/stunnel.conf

 # Restarting stunnel service
 systemctl restart $StunnelDir

}

function InsOpenVPN(){
 # Checking if openvpn folder is accidentally deleted or purged
 if [[ ! -e /etc/openvpn ]]; then
  mkdir -p /etc/openvpn
 fi

 # Removing all existing openvpn server files
 rm -rf /etc/openvpn/*

 # Creating server.conf, ca.crt, server.crt and server.key
 cat <<'myOpenVPNconf1' > /etc/openvpn/server_tcp.conf
# LODIxyrussScript

port MyOvpnPort1
dev tun
proto tcp
ca /etc/openvpn/ca.crt
cert /etc/openvpn/server.crt
key /etc/openvpn/server.key
dh /etc/openvpn/dh4096.pem
duplicate-cn
dh none
persist-tun
persist-key
persist-remote-ip
cipher none
ncp-disable
auth none
comp-lzo
tun-mtu 1500
reneg-sec 0
plugin /etc/openvpn/openvpn-auth-pam.so /etc/pam.d/login
verify-client-cert none
username-as-common-name
max-clients 4000
topology subnet
server 172.16.0.0 255.255.0.0
push "redirect-gateway def1"
keepalive 5 60
status /etc/openvpn/tcp_stats.log
log /etc/openvpn/tcp.log
verb 2
script-security 2
socket-flags TCP_NODELAY
push "socket-flags TCP_NODELAY"
push "dhcp-option DNS 1.0.0.1"
push "dhcp-option DNS 1.1.1.1"
push "dhcp-option DNS 8.8.4.4"
push "dhcp-option DNS 8.8.8.8"
myOpenVPNconf1
cat <<'myOpenVPNconf2' > /etc/openvpn/server_udp.conf
# LODIxyrussScript

port MyOvpnPort2
dev tun
proto udp
ca /etc/openvpn/ca.crt
cert /etc/openvpn/server.crt
key /etc/openvpn/server.key
dh /etc/openvpn/dh4096.pem
duplicate-cn
dh none
persist-tun
persist-key
persist-remote-ip
cipher none
ncp-disable
auth none
comp-lzo
tun-mtu 1500
reneg-sec 0
plugin /etc/openvpn/openvpn-auth-pam.so /etc/pam.d/login
verify-client-cert none
username-as-common-name
max-clients 4000
topology subnet
server 172.17.0.0 255.255.0.0
push "redirect-gateway def1"
keepalive 5 60
status /etc/openvpn/tcp_stats.log
log /etc/openvpn/tcp.log
verb 2
script-security 2
socket-flags TCP_NODELAY
push "socket-flags TCP_NODELAY"
push "dhcp-option DNS 1.0.0.1"
push "dhcp-option DNS 1.1.1.1"
push "dhcp-option DNS 8.8.4.4"
push "dhcp-option DNS 8.8.8.8"
myOpenVPNconf2
 cat <<'EOF7'> /etc/openvpn/ca.crt
-----BEGIN CERTIFICATE-----
MIIETTCCArWgAwIBAgIJAOCXG8U400DqMA0GCSqGSIb3DQEBCwUAMB4xHDAaBgNV
BAMME2NuX01XM05ta1VIYjNqVWZaN0swHhcNMjEwMTIzMTMyMTE2WhcNMzEwMTIx
MTMyMTE2WjAeMRwwGgYDVQQDDBNjbl9NVzNObWtVSGIzalVmWjdLMIIBojANBgkq
hkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAz54TBxr4veMF9io+dbT0HzE/Zq2xR/HC
XtAZZ+dGWqW6m9xXOtn/1FQRC2Dms2uOFuehjJ//gg8rosMyWRqkGD8aNXlpd/x4
q/Fa13iQ8puuKc94xZE5Kw/bNikdxMlfV6bzdRW3MvwyLLq0xDRESo6dBnovXUfL
sa1H+EI4J6b0uVGPA9/JhfIGA0aGrQBMDSIreBNPrsx7bOMLXNVJJ92T3K+d2Cjk
Yi+cDf6DpFq2cSxPZaAfx8A8A2igwaKZv4oDwM3K7sPct0GEM7peuLQdggyTQg2Z
EApi9t4Izw3M83QObf36c3kcoVgdID19OKcrP/ZiRCAmYtJBkwTl/iuZjhY7MrCr
uMORSua6vBYNVeqZOC8QVZyJi89WwVH/8CMrTZ2szG1HZSXj2E4BQENIOvcmW8q6
FKFa+5vAoZLGLeyJNP/1NM+RwXqW5GTr+LgcGjDdIeAK2Axcybvq53igHitq3OQr
9k8R3NR3EHPslSK86xuVcP4u6VOj9Fc7AgMBAAGjgY0wgYowHQYDVR0OBBYEFI3J
A9dzfit7uDxexcaJFcIobwQpME4GA1UdIwRHMEWAFI3JA9dzfit7uDxexcaJFcIo
bwQpoSKkIDAeMRwwGgYDVQQDDBNjbl9NVzNObWtVSGIzalVmWjdLggkA4JcbxTjT
QOowDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAQYwDQYJKoZIhvcNAQELBQADggGB
ACyw37SKqqtYCyoZdjCfrnNTAe+lSLgq/HtPztRe1zeWOohVkykJvttwJ6+8TtJs
Utjty/fCjXw8saBsg/k2byePFagzqfK3QI5X4vUv2lnOosMvdBA1fL+hTtHKo+GP
4A+YNKdpXcqdp8jDlFL8arU6HIg6AF2kH5CLVS4qX6gcH1T2yey8XTAKAi6PnSEi
JDB7oVmYRGbW91cviToxjqxhlPn3Yx7pLzHZrUyuKPURGaUNAoWfWFiMNw1USVP1
3tymdhOodYw6RylF6SPtLklFgi6OQR3Ggjq0nRrjw5hDJ5PBSF4Tf8GEOfx3fE2e
CqEez0Tvto8aSYvZa/+unHVRBFhtS8NtLUgdZmX3YaSDim6ULdJwbMRCZ3r6rBbM
17iprYNx1Hz6/aAQWHVTGCZDsVK1a+fKNWL1nVJzUNwIq27o9w59b80keQRv4i0h
hnmOZXNcBAO00WYjAEjYB4JRI47zxZB7WX+NOH8b6fZ4U2GsfUgpa7LGcqWutprp
ig==
-----END CERTIFICATE-----
</ca>
<cert>
EOF7
 cat <<'EOF9'> /etc/openvpn/server.crt
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            ba:44:10:b5:80:93:17:d7:26:af:9a:09:f0:17:fd:0a
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: CN=cn_MW3NmkUHb3jUfZ7K
        Validity
            Not Before: Jan 23 13:26:42 2021 GMT
            Not After : Jan 21 13:26:42 2031 GMT
        Subject: CN=client
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (3072 bit)
                Modulus:
                    00:dd:c0:00:36:97:26:e3:0c:ab:3e:9b:42:4b:45:
                    ff:15:09:c5:e0:f9:90:3c:dd:3a:b8:7d:6f:e9:bb:
                    35:16:f3:21:fd:48:e9:95:89:26:c8:32:9b:cf:ba:
                    ec:d8:49:ef:a3:42:08:67:72:8e:50:5b:01:90:36:
                    1a:78:37:8b:a8:8a:b6:65:1b:7a:d0:7c:3e:1a:82:
                    20:2f:c0:98:3a:0f:ee:7a:b5:84:07:10:f3:61:06:
                    f8:94:0a:e6:e5:c7:63:c2:d4:30:cc:a2:3f:b7:84:
                    c3:d7:f3:88:7e:e5:48:c0:ab:49:e8:d5:eb:96:1d:
                    55:cf:97:24:a9:ed:33:20:47:8e:9b:af:5c:38:cb:
                    c7:d3:e5:c0:ed:5f:5d:da:6b:77:a7:48:4a:31:c1:
                    3b:fd:64:69:e1:74:64:31:4d:c6:b9:bc:af:e9:13:
                    67:0c:a0:86:ac:ed:df:78:38:07:ed:de:7c:74:66:
                    f5:d8:da:a2:d1:72:ff:de:5d:32:14:09:60:03:f5:
                    d8:11:62:ab:5a:c6:9b:61:de:67:54:d1:06:05:0c:
                    ea:ee:37:04:d7:94:e9:69:ad:40:1c:1b:6d:41:b4:
                    92:d8:23:30:c6:d5:8c:81:2e:cf:7b:29:e3:46:6f:
                    6f:8e:f4:ca:a2:a5:b5:f2:d9:8f:89:bf:39:c4:0c:
                    da:79:c4:54:37:79:2a:8e:a3:7e:0c:62:24:8d:00:
                    62:be:9f:e2:63:e1:f1:bd:c5:7a:02:45:88:9d:d4:
                    66:f2:14:1d:52:2c:d7:29:a0:74:05:ed:c3:81:a5:
                    09:ad:bf:b8:15:a3:44:79:1f:6d:70:aa:df:86:cf:
                    68:b2:7f:94:63:4d:b1:13:0d:5e:a6:7c:d8:dc:d7:
                    ad:92:73:d1:57:cd:91:95:e6:de:f5:9e:2d:81:01:
                    11:01:90:82:5e:95:06:65:ac:1f:74:7a:68:e7:5c:
                    b6:c7:97:ee:fc:85:07:82:fd:9d:e4:44:20:8f:5b:
                    dc:25:4b:66:59:b8:78:f5:60:a5
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            X509v3 Subject Key Identifier: 
                2A:F4:47:F8:5C:8C:44:5C:1E:E8:6D:02:16:9B:14:C1:A0:7A:7C:91
            X509v3 Authority Key Identifier: 
                keyid:8D:C9:03:D7:73:7E:2B:7B:B8:3C:5E:C5:C6:89:15:C2:28:6F:04:29
                DirName:/CN=cn_MW3NmkUHb3jUfZ7K
                serial:E0:97:1B:C5:38:D3:40:EA

            X509v3 Extended Key Usage: 
                TLS Web Client Authentication
            X509v3 Key Usage: 
                Digital Signature
    Signature Algorithm: sha256WithRSAEncryption
         0c:bb:52:bd:47:00:b3:e2:6e:16:b6:bb:9f:54:c8:f8:0f:59:
         f0:49:b0:e3:25:e5:3d:35:38:c1:7e:2e:34:20:63:f0:de:ab:
         6c:5b:40:1f:b6:9f:c4:0e:19:b2:ba:5b:4f:c9:77:cb:8b:ef:
         ba:49:66:88:43:ae:15:85:d0:20:e1:37:b8:22:5e:21:1b:7b:
         f3:19:db:16:ab:2f:ff:b8:14:2f:ae:9e:30:d9:30:51:5a:fc:
         c2:38:54:c3:1d:ce:4b:9e:57:03:c1:5b:06:f3:c4:c6:00:ab:
         fc:6e:83:c1:82:cc:1d:c8:f0:c5:56:11:ac:f7:2f:f3:ef:e5:
         19:87:0a:49:68:a2:d8:cd:d9:4c:2a:c3:b3:d2:be:d8:06:16:
         38:52:86:22:37:33:a9:a3:22:fc:f0:46:0f:0d:97:6f:bb:9d:
         ea:1f:b0:13:8b:e4:32:01:fd:97:b4:7b:0e:53:70:a2:fc:b1:
         04:3c:79:c8:06:4c:71:36:3d:e0:05:fd:70:a3:67:e5:69:56:
         92:9c:98:2b:2d:e6:fe:fb:64:fc:85:1c:84:7f:d2:71:11:eb:
         49:30:74:10:1b:fe:ab:57:c1:98:81:6a:71:1a:4c:61:b7:44:
         49:96:81:00:2e:cc:69:6e:ca:eb:90:8c:b3:9f:4a:c8:2e:b5:
         38:b8:5f:4b:96:74:ea:5f:fb:32:c9:83:13:9b:77:a6:b9:cf:
         3a:f4:fa:2d:92:d1:26:7c:cf:d1:c1:ef:5d:72:de:8f:b8:af:
         b3:11:77:8b:92:85:d6:7c:2a:c8:ad:58:98:69:51:68:af:80:
         33:de:f4:38:a3:cc:ae:00:70:1a:3f:25:7a:bd:05:02:de:50:
         ee:a1:59:2a:64:cf:9b:d4:83:0a:7a:2f:29:f4:e3:6c:ce:98:
         47:b6:90:11:ca:0d:f1:36:6a:80:39:74:ef:a4:d9:e5:22:6e:
         19:e6:89:94:8c:b9:c8:02:32:6c:3d:13:61:dd:4d:37:c4:b8:
         df:78:05:d0:fa:58
-----BEGIN CERTIFICATE-----
MIIEWjCCAsKgAwIBAgIRALpEELWAkxfXJq+aCfAX/QowDQYJKoZIhvcNAQELBQAw
HjEcMBoGA1UEAwwTY25fTVczTm1rVUhiM2pVZlo3SzAeFw0yMTAxMjMxMzI2NDJa
Fw0zMTAxMjExMzI2NDJaMBExDzANBgNVBAMMBmNsaWVudDCCAaIwDQYJKoZIhvcN
AQEBBQADggGPADCCAYoCggGBAN3AADaXJuMMqz6bQktF/xUJxeD5kDzdOrh9b+m7
NRbzIf1I6ZWJJsgym8+67NhJ76NCCGdyjlBbAZA2Gng3i6iKtmUbetB8PhqCIC/A
mDoP7nq1hAcQ82EG+JQK5uXHY8LUMMyiP7eEw9fziH7lSMCrSejV65YdVc+XJKnt
MyBHjpuvXDjLx9PlwO1fXdprd6dISjHBO/1kaeF0ZDFNxrm8r+kTZwyghqzt33g4
B+3efHRm9djaotFy/95dMhQJYAP12BFiq1rGm2HeZ1TRBgUM6u43BNeU6WmtQBwb
bUG0ktgjMMbVjIEuz3sp40Zvb470yqKltfLZj4m/OcQM2nnEVDd5Ko6jfgxiJI0A
Yr6f4mPh8b3FegJFiJ3UZvIUHVIs1ymgdAXtw4GlCa2/uBWjRHkfbXCq34bPaLJ/
lGNNsRMNXqZ82NzXrZJz0VfNkZXm3vWeLYEBEQGQgl6VBmWsH3R6aOdctseX7vyF
B4L9neREII9b3CVLZlm4ePVgpQIDAQABo4GfMIGcMAkGA1UdEwQCMAAwHQYDVR0O
BBYEFCr0R/hcjERcHuhtAhabFMGgenyRME4GA1UdIwRHMEWAFI3JA9dzfit7uDxe
xcaJFcIobwQpoSKkIDAeMRwwGgYDVQQDDBNjbl9NVzNObWtVSGIzalVmWjdLggkA
4JcbxTjTQOowEwYDVR0lBAwwCgYIKwYBBQUHAwIwCwYDVR0PBAQDAgeAMA0GCSqG
SIb3DQEBCwUAA4IBgQAMu1K9RwCz4m4WtrufVMj4D1nwSbDjJeU9NTjBfi40IGPw
3qtsW0Aftp/EDhmyultPyXfLi++6SWaIQ64VhdAg4Te4Il4hG3vzGdsWqy//uBQv
rp4w2TBRWvzCOFTDHc5LnlcDwVsG88TGAKv8boPBgswdyPDFVhGs9y/z7+UZhwpJ
aKLYzdlMKsOz0r7YBhY4UoYiNzOpoyL88EYPDZdvu53qH7ATi+QyAf2XtHsOU3Ci
/LEEPHnIBkxxNj3gBf1wo2flaVaSnJgrLeb++2T8hRyEf9JxEetJMHQQG/6rV8GY
gWpxGkxht0RJloEALsxpbsrrkIyzn0rILrU4uF9LlnTqX/syyYMTm3emuc869Pot
ktEmfM/Rwe9dct6PuK+zEXeLkoXWfCrIrViYaVFor4Az3vQ4o8yuAHAaPyV6vQUC
3lDuoVkqZM+b1IMKei8p9ONszphHtpARyg3xNmqAOXTvpNnlIm4Z5omUjLnIAjJs
PRNh3U03xLjfeAXQ+lg=
-----END CERTIFICATE-----
</cert>
<key>
EOF9
 cat <<'EOF10'> /etc/openvpn/server.key
-----BEGIN PRIVATE KEY-----
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
pGT+SiiqvLR1VgJLd5B+/uGD
-----END PRIVATE KEY-----
</key>
<tls-auth>
EOF10
 cat <<'EOF18'> /etc/openvpn/ta.key
#
# 2048 bit OpenVPN static key
#
-----BEGIN OpenVPN Static key V1-----
da91b24edc4b5c20d5f0e052af123c02
f54b03d995a650395b77eee6f8f63095
28463502fcd136b35d157c2902507c8e
dc6ca914b5dfe923e139e7ae0f3ae08a
84c613d736456f39a0a1ae1255fa8709
bdc8262ec6254f4a3a345847a3841de3
cb7a0baef7950e2d0c015e2348e671c8
f69e450be897cee0b2636433d41525ba
4b6d436b10c7723d1cca778bbfb989d1
3626a2986cc3eb82872b1b198d3dd7ae
ea367afc3daadfa46680ba968be7e55f
3ee700214fbb2d18794979df339a6855
5a377b13ad385a9f106e4690ed6baf3c
7b11dd1ecd500830fde16eb971afdbfe
afd0533feeb008cd92710ace5fea6f68
1167d9987de74d7a431697cebb2b4c59
-----END OpenVPN Static key V1-----
EOF18
 cat <<'EOF13'> /etc/openvpn/dh4096.pem
-----BEGIN DH PARAMETERS-----
MIICCAKCAgEA4n16aZpGsqucktU0QAkocQGie3E0rjbaanO+8HWea4Uf6XvKokA+
iXZl/pPHg/ItVjkFZViWMzZ9Xa0/Y2JKVuYCnguC8xSdN+xlo2gQ+PwK1ExrB0lR
PoCWa/KzJIQI5VWHNUDh0qkdmGgpxfAIKNZXzbxW3ktZi1oX0TI8vPFejbtWEGoE
H4HDhF6376o2NvHPILEVNzmWp9hRpmU+luxFQaoDD5iDkrpL1zdGvBhmGilYQwRo
0jt5uIm6N/S/jFvwMhn4QFKaDOppFwTwH+sH9/EiDH93xlmGv6B5SiI2aP1w1YKj
ytDXm680EMzfYP1XYcd/6u+9xHI1BsJAWvcjOhPujAUy8krWe/+PjpYypLwx9gj7
zuHxsyrGvt8xPyRJfNbRn5Bvw4T+7RMbHGUehdy40qORJ4+ahd/+MhW/RDgx1EBf
njX9j2mSXEHW8AlEQlGaEDiUQqKZQmYDvkVMfjgl7c4HJxRSK/bl5UqLY6n1m744
fHzoDeQYl57JKTpgz026Gs/XXiZptI9H+fEHjHHcKgEreOA7tDiiqgrNvkPsRB+L
j2UJ0Ap3iVdPtCGii39p6i3B8jRnRiFcGoT+W15zjwEwD/tl699hZc1IMdeAod27
n7VpX6UPkLnqGE3HWh8eDnFndCYS+OKoRtIQZoJkzJA/Lq3o1YCdjFMCAQI=
-----END DH PARAMETERS-----
EOF13
EOF10

 # Getting all dns inside resolv.conf then use as Default DNS for our openvpn server
 #grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read -r line; do
	#echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server_tcp.conf
#done
 #grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read -r line; do
	#echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server_udp.conf
#done

 # setting openvpn server port
 sed -i "s|MyOvpnPort1|$OpenVPN_Port1|g" /etc/openvpn/server_tcp.conf
 sed -i "s|MyOvpnPort2|$OpenVPN_Port2|g" /etc/openvpn/server_udp.conf
 
 # Generating openvpn dh.pem file using openssl
 #openssl dhparam -out /etc/openvpn/dh.pem 1024
 
 # Getting some OpenVPN plugins for unix authentication
 wget -qO /etc/openvpn/b.zip 'https://raw.githubusercontent.com/Bonveio/BonvScripts/master/openvpn_plugin64'
 unzip -qq /etc/openvpn/b.zip -d /etc/openvpn
 rm -f /etc/openvpn/b.zip
 
 # Some workaround for OpenVZ machines for "Startup error" openvpn service
 if [[ "$(hostnamectl | grep -i Virtualization | awk '{print $2}' | head -n1)" == 'openvz' ]]; then
 sed -i 's|LimitNPROC|#LimitNPROC|g' /lib/systemd/system/openvpn*
 systemctl daemon-reload
fi

 # Allow IPv4 Forwarding
 echo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/20-openvpn.conf && sysctl --system &> /dev/null && echo 1 > /proc/sys/net/ipv4/ip_forward

 # Iptables Rule for OpenVPN server
 #PUBLIC_INET="$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1)"
 #IPCIDR='10.200.0.0/16'
 #iptables -I FORWARD -s $IPCIDR -j ACCEPT
 #iptables -t nat -A POSTROUTING -o $PUBLIC_INET -j MASQUERADE
 #iptables -t nat -A POSTROUTING -s $IPCIDR -o $PUBLIC_INET -j MASQUERADE
 
 # Installing Firewalld
 apt install firewalld -y
 systemctl start firewalld
 systemctl enable firewalld
 firewall-cmd --quiet --set-default-zone=public
 firewall-cmd --quiet --zone=public --permanent --add-port=1-65534/tcp
 firewall-cmd --quiet --zone=public --permanent --add-port=1-65534/udp
 firewall-cmd --quiet --reload
 firewall-cmd --quiet --add-masquerade
 firewall-cmd --quiet --permanent --add-masquerade
 firewall-cmd --quiet --permanent --add-service=ssh
 firewall-cmd --quiet --permanent --add-service=openvpn
 firewall-cmd --quiet --permanent --add-service=http
 firewall-cmd --quiet --permanent --add-service=https
 firewall-cmd --quiet --permanent --add-service=privoxy
 firewall-cmd --quiet --permanent --add-service=squid
 firewall-cmd --quiet --reload
 
 # Enabling IPv4 Forwarding
 echo 1 > /proc/sys/net/ipv4/ip_forward
 
 # Starting OpenVPN server
 systemctl start openvpn@server_tcp
 systemctl start openvpn@server_udp
 systemctl enable openvpn@server_tcp
 systemctl enable openvpn@server_udp
 systemctl restart openvpn@server_tcp
 systemctl restart openvpn@server_udp
 
 # Pulling OpenVPN no internet fixer script
 #wget -qO /etc/openvpn/openvpn.bash "https://raw.githubusercontent.com/Bonveio/BonvScripts/master/openvpn.bash"
 #0chmod +x /etc/openvpn/openvpn.bash
}

function InsProxy(){
 # Removing Duplicate privoxy config
 rm -rf /etc/privoxy/config*
 
 # Creating Privoxy server config using cat eof tricks
 cat <<'myPrivoxy' > /etc/privoxy/config
# My Privoxy Server Config
user-manual /usr/share/doc/privoxy/user-manual
confdir /etc/privoxy
logdir /var/log/privoxy
filterfile default.filter
logfile logfile
listen-address 0.0.0.0:Privoxy_Port1
listen-address 0.0.0.0:Privoxy_Port2
toggle 1
enable-remote-toggle 0
enable-remote-http-toggle 0
enable-edit-actions 0
enforce-blocks 0
buffer-limit 4096
enable-proxy-authentication-forwarding 1
forwarded-connect-retries 1
accept-intercepted-requests 1
allow-cgi-request-crunching 1
split-large-forms 0
keep-alive-timeout 5
tolerate-pipelining 1
socket-timeout 300
permit-access 0.0.0.0/0 IP-ADDRESS
myPrivoxy

 # Setting machine's IP Address inside of our privoxy config(security that only allows this machine to use this proxy server)
 sed -i "s|IP-ADDRESS|$IPADDR|g" /etc/privoxy/config
 
 # Setting privoxy ports
 sed -i "s|Privoxy_Port1|$Privoxy_Port1|g" /etc/privoxy/config
 sed -i "s|Privoxy_Port2|$Privoxy_Port2|g" /etc/privoxy/config

 # I'm setting Some Squid workarounds to prevent Privoxy's overflowing file descriptors that causing 50X error when clients trying to connect to your proxy server(thanks for this trick @homer_simpsons)
 apt remove --purge squid -y
 rm -rf /etc/squid/sq*
 apt install squid -y
 
# Squid Ports (must be 1024 or higher)
 Proxy_Port1='8000'
 Proxy_Port2='8080'
 Proxy_Port3='3128'
 Proxy_Port4='8888'
 cat <<mySquid > /etc/squid/squid.conf
acl VPN dst $(wget -4qO- http://ipinfo.io/ip)/32
http_access allow VPN
http_access deny all 
http_port 0.0.0.0:$Proxy_Port1
http_port 0.0.0.0:$Proxy_Port2
http_port 0.0.0.0:$Proxy_Port3
http_port 0.0.0.0:$Proxy_Port4
http_access deny all
forwarded_for off
via off
request_header_access Host allow all
request_header_access Content-Length allow all
request_header_access Content-Type allow all
request_header_access All deny all
coredump_dir /var/spool/squid
dns_nameservers 1.1.1.1 1.0.0.1
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern . 0 20% 4320
visible_hostname localhost
mySquid

 sed -i "s|SquidCacheHelper|$Privoxy_Port1|g" /etc/squid/squid.conf

 # Starting Proxy server
 echo -e "Restarting proxy server.."
 systemctl restart privoxy
 systemctl restart squid
}

function OvpnConfigs(){
 # Creating nginx config for our ovpn config downloads webserver
 cat <<'myNginxC' > /etc/nginx/conf.d/bonveio-ovpn-config.conf
# My OpenVPN Config Download Directory
server {
 listen 0.0.0.0:myNginx;
 server_name localhost;
 root /var/www/openvpn;
 index index.html;
}
myNginxC

 # Setting our nginx config port for .ovpn download site
 sed -i "s|myNginx|$OvpnDownload_Port|g" /etc/nginx/conf.d/bonveio-ovpn-config.conf

 # Removing Default nginx page(port 80)
 rm -rf /etc/nginx/sites-*

 # Creating our root directory for all of our .ovpn configs
 rm -rf /var/www/openvpn
 mkdir -p /var/www/openvpn

 # Now creating all of our OpenVPN Configs 
cat <<EOF152> /var/www/openvpn/GTMConfig.ovpn
# Credits to GakodX
client
dev tun
proto tcp
remote $IPADDR $OpenVPN_Port1
remote-cert-tls server
resolv-retry infinite
nobind
tun-mtu 1500
tun-mtu-extra 32
mssfix 1450
persist-key
persist-tun
auth-user-pass
auth none
auth-nocache
cipher none
keysize 0
comp-lzo
setenv CLIENT_CERT 0
reneg-sec 0
verb 1
http-proxy $(curl -s http://ipinfo.io/ip || wget -q http://ipinfo.io/ip) $Proxy_Port3
http-proxy-retry

<auth-user-pass>
sam
sam
</auth-user-pass>
<ca>
$(cat /etc/openvpn/ca.crt)
$(cat /etc/openvpn/server.crt)
$(cat /etc/openvpn/server.key)
$(cat /etc/openvpn/ta.key)
</tls-auth>
EOF152

cat <<EOF16> /var/www/openvpn/SunConfig.ovpn
# Credits to GakodX
client
dev tun
proto udp
remote $IPADDR $OpenVPN_Port2
remote-cert-tls server
resolv-retry infinite
nobind
tun-mtu 1500
tun-mtu-extra 32
mssfix 1450
persist-key
persist-tun
auth-user-pass
auth none
auth-nocache
cipher none
keysize 0
comp-lzo
setenv CLIENT_CERT 0
reneg-sec 0
verb 1

<auth-user-pass>
sam
sam
</auth-user-pass>
<ca>
$(cat /etc/openvpn/ca.crt)
$(cat /etc/openvpn/server.crt)
$(cat /etc/openvpn/server.key)
$(cat /etc/openvpn/ta.key)
</tls-auth>
EOF16

cat <<EOF160> /var/www/openvpn/GStories.ovpn
# Credits to GakodX
client
dev tun
proto tcp
remote $IPADDR $OpenVPN_Port1
http-proxy $(curl -s http://ipinfo.io/ip || wget -q http://ipinfo.io/ip) $Proxy_Port2
http-proxy-retry
remote-cert-tls server
resolv-retry infinite
nobind
tun-mtu 1500
tun-mtu-extra 32
mssfix 1450
persist-key
persist-tun
auth-user-pass
auth none
auth-nocache
cipher none
keysize 0
comp-lzo
setenv CLIENT_CERT 0
reneg-sec 0
verb 1

<auth-user-pass>
sam
sam
</auth-user-pass>
<ca>
$(cat /etc/openvpn/ca.crt)
$(cat /etc/openvpn/server.crt)
$(cat /etc/openvpn/server.key)
$(cat /etc/openvpn/ta.key)
</tls-auth>
EOF160

cat <<EOF17> /var/www/openvpn/SunNoLoad.ovpn
client
dev tun
proto tcp-client
remote 127.0.0.1 443
route $IPADDR 255.255.255.255 net_gateway
remote-cert-tls server
bind
float
tun-mtu 1500
tun-mtu-extra 32
mssfix 1450
mute-replay-warnings
connect-retry-max 9999
redirect-gateway def1
connect-retry 0 1
resolv-retry infinite
setenv CLIENT_CERT 0
persist-tun
persist-key
auth-user-pass
auth none
auth-nocache
auth-retry interact
cipher none
keysize 0
comp-lzo
reneg-sec 0
verb 0
nice -20
log /dev/null
<auth-user-pass>
sam
sam
</auth-user-pass>
<ca>
$(cat /etc/openvpn/ca.crt)
$(cat /etc/openvpn/server.crt)
$(cat /etc/openvpn/server.key)
$(cat /etc/openvpn/ta.key)
</tls-auth>
EOF17

 # Creating OVPN download site index.html
cat <<'mySiteOvpn' > /var/www/openvpn/index.html
<!DOCTYPE html>
<html lang="en">

<!-- OVPN Download site by LODIxyrussScript -->

<head><meta charset="utf-8" /><title>MyScriptName OVPN Config Download</title><meta name="description" content="MyScriptName Server" /><meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport" /><meta name="theme-color" content="#000000" /><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css"><link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet"><link href="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.8.3/css/mdb.min.css" rel="stylesheet"></head><body><div class="container justify-content-center" style="margin-top:9em;margin-bottom:5em;"><div class="col-md"><div class="view"><img src="https://openvpn.net/wp-content/uploads/openvpn.jpg" class="card-img-top"><div class="mask rgba-white-slight"></div></div><div class="card"><div class="card-body"><h5 class="card-title">Config List</h5><br /><ul class="list-group"><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>For Globe/TM <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span><br /><small> For EZ/GS Promo with WNP freebies</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/GTMConfig.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>For Sun <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span><br /><small> For TU UDP Promos</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/SunConfig.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>For Sun <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span><br /><small> Trinet GIGASTORIES Promos</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/GStories.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li></ul></div></div></div></div></body></html>
mySiteOvpn
 
 # Setting template's correct name,IP address and nginx Port
 sed -i "s|MyScriptName|$MyScriptName|g" /var/www/openvpn/index.html
 sed -i "s|NGINXPORT|$OvpnDownload_Port|g" /var/www/openvpn/index.html
 sed -i "s|IP-ADDRESS|$IPADDR|g" /var/www/openvpn/index.html

 # Restarting nginx service
 systemctl restart nginx
 
 # Creating all .ovpn config archives
 cd /var/www/openvpn
 zip -qq -r Configs.zip *.ovpn
 cd
}

function ip_address(){
  local IP="$( ip addr | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | egrep -v "^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\." | head -n 1 )"
  [ -z "${IP}" ] && IP="$( wget -qO- -t1 -T2 ipv4.icanhazip.com )"
  [ -z "${IP}" ] && IP="$( wget -qO- -t1 -T2 ipinfo.io/ip )"
  [ ! -z "${IP}" ] && echo "${IP}" || echo
} 
IPADDR="$(ip_address)"

function ConfStartup(){
 # Daily reboot time of our machine
 # For cron commands, visit https://crontab.guru
 echo -e "0 4\t* * *\troot\treboot" > /etc/cron.d/b_reboot_job

 # Creating directory for startup script
 rm -rf /etc/barts
 mkdir -p /etc/barts
 chmod -R 755 /etc/barts
 
 # Creating startup script using cat eof tricks
 cat <<'EOFSH' > /etc/barts/startup.sh
#!/bin/bash
# Setting server local time
ln -fs /usr/share/zoneinfo/MyVPS_Time /etc/localtime

# Prevent DOS-like UI when installing using APT (Disabling APT interactive dialog)
export DEBIAN_FRONTEND=noninteractive

# Allowing ALL TCP ports for our machine (Simple workaround for policy-based VPS)
iptables -A INPUT -s $(wget -4qO- http://ipinfo.io/ip) -p tcp -m multiport --dport 1:65535 -j ACCEPT

# Allowing OpenVPN to Forward traffic
/bin/bash /etc/openvpn/openvpn.bash

# Deleting Expired SSH Accounts
/usr/local/sbin/delete_expired &> /dev/null
EOFSH
 chmod +x /etc/barts/startup.sh
 
 # Setting server local time every time this machine reboots
 sed -i "s|MyVPS_Time|$MyVPS_Time|g" /etc/barts/startup.sh

 # 
 rm -rf /etc/sysctl.d/99*

 # Setting our startup script to run every machine boots 
 echo "[Unit]
Description=Barts Startup Script
Before=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/bin/bash /etc/barts/startup.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/barts.service
 chmod +x /etc/systemd/system/barts.service
 systemctl daemon-reload
 systemctl start barts
 systemctl enable barts &> /dev/null

 # Rebooting cron service
 systemctl restart cron
 systemctl enable cron
 
}

function ConfMenu(){
echo -e " Creating Menu scripts.."

cd /usr/local/sbin/
rm -rf {accounts,base-ports,base-ports-wc,base-script,bench-network,clearcache,connections,create,create_random,create_trial,delete_expired,diagnose,edit_dropbear,edit_openssh,edit_openvpn,edit_ports,edit_squid3,edit_stunnel4,locked_list,menu,options,ram,reboot_sys,reboot_sys_auto,restart_services,server,set_multilogin_autokill,set_multilogin_autokill_lib,show_ports,speedtest,user_delete,user_details,user_details_lib,user_extend,user_list,user_lock,user_unlock}
wget -q 'https://raw.githubusercontent.com/Barts-23/menu1/master/menu.zip'
unzip -qq menu.zip
rm -f menu.zip
chmod +x ./*
dos2unix ./* &> /dev/null
sed -i 's|/etc/squid/squid.conf|/etc/privoxy/config|g' ./*
sed -i 's|http_port|listen-address|g' ./*
cd ~

echo 'clear' > /etc/profile.d/barts.sh
echo 'echo '' > /var/log/syslog' >> /etc/profile.d/barts.sh
echo 'screenfetch -p -A Android' >> /etc/profile.d/barts.sh
chmod +x /etc/profile.d/barts.sh
}

function ScriptMessage(){
 echo -e " (Ã¯Â½Â¡Ã¢â€”â€¢Ã¢â‚¬Â¿Ã¢â€”â€¢Ã¯Â½Â¡) $MyScriptName Debian VPS Installer"
 echo -e " Open release version"
 echo -e ""
 echo -e " Script created by Bonveio"
 echo -e " Edited by LODIxyruss"
}


#############################
#############################
## Installation Process
#############################
## WARNING: Do not modify or edit anything
## if you did'nt know what to do.
## This part is too sensitive.
#############################
#############################

 # First thing to do is check if this machine is Debian
 source /etc/os-release
if [[ "$ID" != 'debian' ]]; then
 ScriptMessage
 echo -e "[\e[1;31mError\e[0m] This script is for Debian only, exting..." 
 exit 1
fi

 # Now check if our machine is in root user, if not, this script exits
 # If you're on sudo user, run `sudo su -` first before running this script
 if [[ $EUID -ne 0 ]];then
 ScriptMessage
 echo -e "[\e[1;31mError\e[0m] This script must be run as root, exiting..."
 exit 1
fi

 # (For OpenVPN) Checking it this machine have TUN Module, this is the tunneling interface of OpenVPN server
 if [[ ! -e /dev/net/tun ]]; then
 echo -e "[\e[1;31mÃƒâ€”\e[0m] You cant use this script without TUN Module installed/embedded in your machine, file a support ticket to your machine admin about this matter"
 echo -e "[\e[1;31m-\e[0m] Script is now exiting..."
 exit 1
fi

 # Begin Installation by Updating and Upgrading machine and then Installing all our wanted packages/services to be install.
 ScriptMessage
 sleep 2
 InstUpdates
 
 # Configure OpenSSH and Dropbear
 echo -e "Configuring ssh..."
 InstSSH
 
 # Configure Stunnel
 echo -e "Configuring stunnel..."
 InsStunnel
 
 # Configure Webmin
 echo -e "Configuring webmin..."
 InstWebmin
 
 # Configure Privoxy and Squid
 echo -e "Configuring proxy..."
 InsProxy
 
 # Configure OpenVPN
 echo -e "Configuring OpenVPN..."
 InsOpenVPN
 
 # Configuring Nginx OVPN config download site
 OvpnConfigs

 # Some assistance and startup scripts
 ConfStartup

 # VPS Menu script v1.0
 ConfMenu
 
 # Setting server local time
 ln -fs /usr/share/zoneinfo/$MyVPS_Time /etc/localtime
 
 clear
 cd ~

 # Running sysinfo 
 bash /etc/profile.d/barts.sh
 
 # Showing script's banner message
 ScriptMessage
 
 # Showing additional information from installating this script
 echo -e ""
 echo -e " Success Installation"
 echo -e ""
 echo -e " Service Ports: "
 echo -e " OpenSSH: $SSH_Port1, $SSH_Port2"
 echo -e " Stunnel: $Stunnel_Port1, $Stunnel_Port2"
 echo -e " DropbearSSH: $Dropbear_Port1, $Dropbear_Port2"
 echo -e " Privoxy: $Privoxy_Port1, $Privoxy_Port2"
 echo -e " Squid: $Proxy_Port1, $Proxy_Port2"
 echo -e " OpenVPN: $OpenVPN_Port1, $OpenVPN_Port2"
 echo -e " OpenVPN SSL: $Stunnel_Port3"
 echo -e " NGiNX: $OvpnDownload_Port"
 echo -e " Webmin: 10000"
 echo -e " L2tp IPSec Key: fakenetvpn101"
 echo -e ""
 echo -e ""
 echo -e " OpenVPN Configs Download site"
 echo -e " http://$IPADDR:$OvpnDownload_Port"
 echo -e ""
 echo -e " All OpenVPN Configs Archive"
 echo -e " http://$IPADDR:$OvpnDownload_Port/Configs.zip"
 echo -e ""
 echo -e ""
 echo -e " [Note] DO NOT RESELL THIS SCRIPT"

 # Clearing all logs from installation
 rm -rf /root/.bash_history && history -c && echo '' > /var/log/syslog

rm -f setup*
exit 1
